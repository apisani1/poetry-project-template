name: Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write
  id-token: write

jobs:

  tests:
    uses: ./.github/workflows/tests.yml

  release:
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '{{ cookiecutter.python_version }}'

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ "{{" }} runner.os {{ "}}" }}-poetry-${{ "{{" }} hashFiles('**/pyproject.toml') {{ "}}" }}
          restore-keys: |
            ${{ "{{" }} runner.os {{ "}}" }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Determine release type
        id: release-type
        run: |
          if [[ ${{ "{{" }} github.ref {{ "}}" }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(\.post[0-9]+)?$ ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
          elif [[ ${{ "{{" }} github.ref {{ "}}" }} =~ ^refs/tags/v.*-alpha|beta|rc ]]; then
            echo "type=prerelease" >> $GITHUB_OUTPUT
          else
            echo "type=draft" >> $GITHUB_OUTPUT
          fi

      - name: Extract release notes from tag
        id: release-notes
        run: |
          VERSION=${{ "{" }}GITHUB_REF#refs/tags/v{{ "}" }}
          echo "Release version: $VERSION"

          echo "Extracting message from tag v$VERSION..."

          # Extract the message from the annotated tag
          git tag -l --format='%(contents)' "v$VERSION" > RELEASE_NOTES.md

          # Check if the tag message was extracted
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "Warning: Could not extract tag message for v$VERSION"
            echo "Creating simple release notes..."
            echo "# Release v$VERSION" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "See CHANGELOG.md for details." >> RELEASE_NOTES.md
          fi

          echo "Release notes content:"
          cat RELEASE_NOTES.md

      - name: Build package
        run: ./run.sh build

      - name: Test PyPI release
        env:
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ "{{" }} secrets.TEST_PYPI_TOKEN {{ "}}" }}
        run: ./run.sh publish:test

      - name: Test installation from TestPyPI
        run: |
          # Create test environment
          python -m venv test_env
          source test_env/bin/activate

          # Install package from TestPyPI
          pip install --index-url https://test.pypi.org/simple/ \
              --extra-index-url https://pypi.org/simple \
              {{ cookiecutter.package_name }}

          # Set up Python environment
          SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
          export PYTHONPATH="${SITE_PACKAGES}:${PYTHONPATH:-}"

          # Test import and version (avoiding f-string with cookiecutter variables)
          python -c "import {{ cookiecutter.package_name }}; print('Installed version: ' + {{ cookiecutter.package_name }}.__version__)"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: RELEASE_NOTES.md
          draft: ${{ "{{" }} steps.release-type.outputs.type == 'draft' {{ "}}" }}
          prerelease: ${{ "{{" }} steps.release-type.outputs.type == 'prerelease' {{ "}}" }}
          token: ${{ "{{" }} secrets.GITHUB_TOKEN {{ "}}" }}

      - name: Publish to PyPI
        if: steps.release-type.outputs.type == 'release'
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ "{{" }} secrets.PYPI_TOKEN {{ "}}" }}
        run: ./run.sh publish

      - name: Update ReadTheDocs
        if: steps.release-type.outputs.type == 'release'
        run: |
          VERSION=${{ "{" }}GITHUB_REF#refs/tags/v{{ "}" }}
          TAG_NAME="v$VERSION"

          echo "Activating version $TAG_NAME via API..."
          curl -s -X PATCH \
            -H "Authorization: Token ${{ "{{" }} secrets.RTD_TOKEN {{ "}}" }}" \
            -H "Content-Type: application/json" \
            -d '{"active": true}' \
            "https://readthedocs.org/api/v3/projects/{{ cookiecutter.project_name }}/versions/$TAG_NAME/" || true
        continue-on-error: true
